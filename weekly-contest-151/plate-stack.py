class DinnerPlates:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.stack = []

    def push(self, val: int) -> None:
        if len(self.stack[-1]) < self.capacity:
            self.stack[-1].append(val)
        else:
            self.stack.append([val])

    def pop(self) -> int:
        self.popAtStack(-1)

    def popAtStack(self, index: int) -> int:
        res = self.stack[index].pop()
        if len(self.stack[index]) == 0:
            self.stack.pop(index)
        return res
'''

[[373, 86], [395, 306], [370], [41, 17], [387], [66], [27], [252, 6], [269, 231], [35, 346]]
[[373, 86], [395, 306], [41, 17], [387], [66], [27], [252, 6], [269, 231], [35, 346]]
[[373, 86], [395, 306], [41], [387], [66], [27], [252, 6], [269, 231], [35, 346]]
[[373, 86], [395, 306], [41], [387], [66], [27], [252, 6], [269], [35, 346]]
[[373, 86], [395, 306], [41], [387], [66], [27], [252, 6], [269], [35, 346]]
[[373, 86], [395, 306], [41], [387], [66], [27], [252, 6], [269], [35]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338], [331, 134], [1, 250], [19]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338], [331, 134], [1, 250]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338], [331, 134], [1]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338], [331, 134]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338], [331]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365, 338]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33], [365]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403, 33]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11], [403]]
[[373, 86], [395, 474], [41, 216], [387, 256], [66, 196], [27, 332], [252, 6], [269, 43], [35, 75], [22, 273], [101, 11]]
'''